KUBERNETES is an open source container orchestration tools developed by google and enable you manage them on different environment 
Advantages 
> High application availability  
> Scalability and high performance 
> Disaster recovery -> backup and restore 

contains one master node and many worker nodes connected by VN (virtual network) which turns all the nodes inside the cluster into one machine of nodes 
Master node / control panel run processes: 
Api server, controller manager, scheduler , etcd (for data e.g backup and restore)

KUBERNETES COMPONENTS 
> prod , Service, Ingress, ConfigMap, Secret, Deployment, StatefulSet, DaemonSet 

EAch Kubernetes node consists of application + Db 



The smallest or basic component of Kubernetes is POD 
pod == Abstraction of a container, creates a layer on top of the container or a running environment for a container so you only work with the kubernets pod and not the containers . Usually on application per pod 
each pod has an Ip address for pods to communicate with each other 
Pods are ephemeral -- meaning they can die very easily 

when a container on a pod fails(e.g db), the pod gets destroyed and a new one is created with a different ip address . This leads us to the use of serivices in Kubernetes as below: 
Service is a permanent ip address which can be attached to each pod 
A service is also a load balancer which catches a request and forwards it to active pod 
> lifecycle of pod and Service is not connected 
> external service opens communication to external source 
> internal serivices is for internal communication 

Ingress does the Dns forwarding to access service ips and routes traffic into the cluster 

CONFIG MAPS AND SECRETS 
Cofigmap is the external configuration of your application e.g db urls only for non-confidential data 
Secrets is like configmap but is used to store secret data e.g credentials username/password stored using base64 encoding and third party tools in kubernetes to encrypt the secrets 
Then connected to pod 
we can read data from configmap or secrets from pod using environment variables or as properties file 


VOLUMES 
Attaches pods to storages e.g local machine where pod is running  or remote cloud cluster

DISTRIBUTED SYSTEMS 
We replicate/clone  nodes accross several servers 

To create a pod replica, we use deployment which is a defined blueprint which defines the number of replicas we need 

StatefulSet SETS are used specifically for applications like databases or stateful appliations. 
DEPLOYMENTS == for stateless apps 
STS == for stateful appS (E.G databases)

â–º  Free Kubernetes Backup and Migration - Download Kasten's K10 and Get 10 nodes free forever: https://www.kasten.io/nana 

All configurations in K8s cluster (from master to worker  nodes ) goes through the Api server(control panel)

Api is the entry point to the cluster 
> recieves a  deployment of sts  configuration and parses it to create neccessary resources  in cluster 

The api server works with the Ui, Api, cli 

each kubernetes config file has 3 major parts 
1. metadata
2. Specification
3. Status --- automatically generated by kubernetes. checks the desired state and the recommended or actual state and updates the file e.g when a node fails, kubernetes creates a replica and automatically updates the number of replicas in the deployment file

status data is gotten from etcd (which holds the current status of any k8 component)

These configuration files are written in the code(thus iac) or git repos 

MINI KUB 
runs kubernetes on localhost due to resources managed by master and worker k8s nodes
Used to run master and worker nodes in one node which has a docker container runtime pre-installed and then run the pod containers on this node 

KUBECTL 
> a cmd tool for kubernetes cluster  

install minikube ( can run either as a container or a virtual machine)
after installation 
minikube start --driver=docker ( to run on docker)
note: minikube can run on docker or vm, and also has docker installed in it used to run pods. pods also are used to run resources in containers 
this creates a local instance of kubernetes on our local machine
> minikube status   ---to view status of k8s instance 

KUBECTL is a cmd tool for interacting with k8s and comes preinstalled with minikube as a dependency 
> kubectl get node --- displays all nodes in the cluster 

dockerhub image for nana's app : hub.docker.com/repository/docker/nanajanashia/k8s-demo-app

// secrets in secret.yml file can't be written literally, we encode them 
> echo -n mongouser | base64    === gives bW9uZ291c2Vy for mongouser

Deployment configuration file parts 
1. Kind : DEPLOYMENT
2. Templates: main part. blueprint for pods. Configuration for pods and has its own 'metadata' and 'spec' section , 
    Also defines configuration for the container in the pod ( which image? which port?)

when deploying db apps, use 1 replica.
If you want to scale db(stateful apps) with multiple replicas, use statefulesets(sts) and not deployments files 


DEPLOYING APP TO MINIKUBE CLUSTER USING KUBECTL 
// make sure minikube is running 
> kubectl get pod 
// no resources found
// configure files to become k8s files and run them 
kubctl apply -f mongo-config.yaml 
kubctl apply -f mongo-secret.yaml 
kubctl apply -f mongo.yaml 
kubctl apply -f webapp.yaml 

// Now our cluster has been created and pods also created running images in containers 
// INTERACTING WITH THE CLUSTER 

> kubctl get all
// shows all components created in the cluster 

> kubctl get configMap // shows config map 
> kubctl get secret // show secretMap 
> kubctl get pod // shows running containers from docker images 


kubctl --help // basic documentation from help 
kubectl describe service webapp-service    get full details about the running service 
kubectl describe pod webapp-deployment-7364734747   // about the pod 
kubctl get pod // shows running pods 
kubctl logs <name of pod > -f (to stream the logs to sdt out)


// to view service from browser 
> kubctl get svc  // shows all service 

minikube ip // shows ip of cluster from which we can use to interact with nodePort services 
or 
kubctl get node 
kubctl get node -o wide // for longer ouput 
// -o wide flag can be used with any command to give verbose output 


SUPABASE_URL=https://hlfikdziayxhvkkgoinw.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTY0MzI2OTg3NCwiZXhwIjoxOTU4ODQ1ODc0fQ.tSuB49sYIBNRZWoz5wrpfq88sT0dNJ_Axj2GpuAOnpg











